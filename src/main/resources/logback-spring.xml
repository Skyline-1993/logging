<?xml version="1.0" encoding="UTF-8" ?>

<!-- 根节点 包含三个属性：scan、scanPeriod、debug
scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认间隔时间1分钟。
debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值是false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">


    <!--子节点 用来定义变量值。有两个属性name、value-->
    <!--通过 property 定义的值会被插入到logger上下文中，可以使用 ${} 来使用变量-->
    <property name="LOG_HOME" value="/logs/exception"></property>


    <!-- 子节点 用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称是default。-->
    <contextName>myAppName</contextName>


    <!-- 子节点 appender 负责写日志的组件，主要用于指定日志输出的目的地。
        有两个属性 name、class。 name指定appender的名称，class指定appender的全限定名-->
    <!-- ch.qos.logback.core.ConsoleAppender 把日志输出到控制台。有两个子节点encoder、target-->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">

        <!-- encoder 将一个event事件转化为一组byte数组
                     将转换后的字节数组输出到文件中
             encoder组件是在0.9.19版本之后才引进来的。在以前的版本中，appender是使用layout，然后使用write对象将字符串写入到文件-->
        <encoder>
            <!--
                日志输出格式：
                    %d表示日期时间，
                    %thread表示线程名，
                    %-5level：级别从左显示5个字符宽度
                    %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
                    %msg：日志消息，
                    %n是换行符
            -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%thread] %msg%n</pattern>
        </encoder>

        <!--layout 将一个event事件转化为一个String字符串。 在0.9.19版本之后，推荐使用encoder-->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} &#45;&#45;%level [%thread] %msg%n</pattern>
        </layout>-->

        <!-- target 字符串System.out(默认)或者System.err -->

    </appender>

    <!-- ch.qos.logback.core.FileAppender 把日志输出到文件。有以下子节点-->
    <appender name="file" class="ch.qos.logback.core.FileAppender">

        <!-- file 节点。被写入日志的文件名，可以是相对目录，也可以是绝对目录。如果上级目录不存在则自动创建-->
        <file>${LOG_HOME}/log.log</file>

        <!--append 节点。 如果是true，日志被追加到文件结尾。如果是false，清空现存文件，默认是true-->
        <append>true</append>

        <!-- encoder 节点。对记录事件进行格式化-->
        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>

        <!-- prudent 节点。如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。-->

    </appender>

    <!--ch.qos.logback.core.rolling.RollingFileAppender 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，讲日志记录到其他文件。-->
    <appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- file 节点。被写入日志的文件名，可以是相对目录，也可以是绝对目录。如果上级目录不存在则自动创建-->
        <file>${LOG_HOME}/test.log</file>

        <!--rollingPolicy 节点： 当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。-->
        <!-- ch.qos.logback.core.rolling.TimeBasedRollingPolicy ：最常用的滚动策略，它根据时间来制定滚动测率，即负责滚动也负责出发滚动。-->
        <!-- ch.qos.logback.core.rolling.FixedWindowRollingPolicy ： -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
            %i：当文件大小超过maxFileSize时，按照i进行文件滚动
            -->

            <fileNamePattern>tests.%i.log.zip</fileNamePattern>

            <!--maxHistory节点：可选节点，控制保留的归档文件的最大数量-->
            <maxHistory>365</maxHistory>
        </rollingPolicy>

        <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置SizeBasedTriggeringPolicy是无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy
        -->
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <maxFileSize>5MB</maxFileSize>
        </triggeringPolicy>

        <encoder>
            <pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
        </encoder>
    </appender>

    <!--日志异步到数据库 -->
    <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <!--日志异步到数据库 -->
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
            <!--连接池 -->
            <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                <driverClass>com.mysql.jdbc.Driver</driverClass>
                <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
                <user>root</user>
                <password>root</password>
            </dataSource>
        </connectionSource>
    </appender>


    <!--logger作为日志记录器，把它关联到应用的对应的context上后，主要用于存放日志对象，也可以定义日志类型、级别。-->
    <!--子节点logger 用来设置某一个包或者具体的某一个类的日志打印级别、以及指定appender。
        logger仅有一个name属性，一个可选的level、和一个可选的addivity属性
        可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger-->
    <!--
		logger主要用于存放日志对象，也可以定义日志类型、级别
		name：表示匹配的logger类型前缀，也就是包的前半部分
		level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
		additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
		false：表示只用当前logger的appender-ref，true：
		表示当前logger的appender-ref和rootLogger的appender-ref都有效
    -->
    <logger name="com.skyline.exception.service" level="debug" additivity="false">
        <appender-ref ref="file"></appender-ref>
    </logger>


    <!--root 子节点。它也是logger元素，但是它是根logger，是所有logger的上级。只有一个level属性，因为name已经被命名为"root",且已经是最上级了。
        level：用来设置打印级别，大小写无关：trace、debug、info、warn、error。默认是debug -->
    <root level="info">
        <appender-ref ref="stdout"></appender-ref>
    </root>

</configuration>